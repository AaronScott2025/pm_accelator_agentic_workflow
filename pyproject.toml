[tool.poetry]
name = "ai-interviewer-pm"
version = "0.1.0"
description = "LangGraph + Qdrant based AI interviewer system for PM interview practice with chunking/retrieval evaluation and MCP integrations"
authors = ["Omar Kahwaji <omarkahwaji@outlook.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "ai_interviewer_pm", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
qdrant-client = "^1.9.2"
langchain = "^0.2.10"
langchain-community = "^0.2.10"
langgraph = "^0.2.23"
langgraph-checkpoint-sqlite = "^2.0.6"
langsmith = "^0.1.98"
cohere = "^5.5.8"
openai = "^1.40.0"
langchain-openai = "^0.1.22"
pydantic = "^2.7.0"
tavily-python = "^0.5.0"
rank-bm25 = "^0.2.2"
nltk = "^3.9"
sentence-transformers = { version = "^3.0.1", optional = true }
httpx = "^0.27.0"
# uvloop = { version = "^0.19.0", markers = "sys_platform == 'darwin' or sys_platform == 'linux'" }  # Disabled for RAGAS compatibility
python-dotenv = "^1.0.1"
fastapi = "^0.116.1"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
ragas = "^0.2.0"
datasets = "^3.0.0"
nest-asyncio = "^1.6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
ruff = "^0.5.5"
black = "^24.4.2"
mypy = "^1.10.0"
jupyter = "^1.0.0"
ipykernel = "^6.29.4"
pytest-asyncio = "^1.1.0"

[tool.poetry.extras]
openai = ["openai"]
cohere = ["cohere"]
sentencetransformers = ["sentence-transformers"]
tavily = ["tavily-python"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "I", "B", "UP", "ANN", "D"]
ignore = [
  "D100", "D102", "D103", "D107",  # docstring completeness relaxed for dev speed
  "D203", "D212", "D401",            # style nits
  "E501"                                # line length handled by black
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
warn_unused_configs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_no_return = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

